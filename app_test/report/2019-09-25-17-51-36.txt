F test_cases/test_login.py::TestLogin::test_login_mobile_error
 self = <unittest.case._Outcome object at 0x00000000047B1B70>
 test_case = <test_login.TestLogin testMethod=test_login_mobile_error>
 isTest = True
 
     @contextlib.contextmanager
     def testPartExecutor(self, test_case, isTest=False):
         old_success = self.success
         self.success = True
         try:
 >           yield
 
 C:\Program Files\Python37\lib\unittest\case.py:59: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <test_login.TestLogin testMethod=test_login_mobile_error>
 result = <TestCaseFunction test_login_mobile_error>
 
     def run(self, result=None):
         orig_result = result
         if result is None:
             result = self.defaultTestResult()
             startTestRun = getattr(result, 'startTestRun', None)
             if startTestRun is not None:
                 startTestRun()
     
         result.startTest(self)
     
         testMethod = getattr(self, self._testMethodName)
         if (getattr(self.__class__, "__unittest_skip__", False) or
             getattr(testMethod, "__unittest_skip__", False)):
             # If the class or method was skipped.
             try:
                 skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')
                             or getattr(testMethod, '__unittest_skip_why__', ''))
                 self._addSkip(result, self, skip_why)
             finally:
                 result.stopTest(self)
             return
         expecting_failure_method = getattr(testMethod,
                                            "__unittest_expecting_failure__", False)
         expecting_failure_class = getattr(self,
                                           "__unittest_expecting_failure__", False)
         expecting_failure = expecting_failure_class or expecting_failure_method
         outcome = _Outcome(result)
         try:
             self._outcome = outcome
     
             with outcome.testPartExecutor(self):
                 self.setUp()
             if outcome.success:
                 outcome.expecting_failure = expecting_failure
                 with outcome.testPartExecutor(self, isTest=True):
 >                   testMethod()
 E                   TypeError: test_login_mobile_error() missing 2 required positional arguments: 'user_data' and 'init_app'
 
 C:\Program Files\Python37\lib\unittest\case.py:615: TypeError
F test_cases/test_login.py::TestLogin::test_login_pwd_error
 self = <unittest.case._Outcome object at 0x00000000047CE588>
 test_case = <test_login.TestLogin testMethod=test_login_pwd_error>
 isTest = True
 
     @contextlib.contextmanager
     def testPartExecutor(self, test_case, isTest=False):
         old_success = self.success
         self.success = True
         try:
 >           yield
 
 C:\Program Files\Python37\lib\unittest\case.py:59: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <test_login.TestLogin testMethod=test_login_pwd_error>
 result = <TestCaseFunction test_login_pwd_error>
 
     def run(self, result=None):
         orig_result = result
         if result is None:
             result = self.defaultTestResult()
             startTestRun = getattr(result, 'startTestRun', None)
             if startTestRun is not None:
                 startTestRun()
     
         result.startTest(self)
     
         testMethod = getattr(self, self._testMethodName)
         if (getattr(self.__class__, "__unittest_skip__", False) or
             getattr(testMethod, "__unittest_skip__", False)):
             # If the class or method was skipped.
             try:
                 skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')
                             or getattr(testMethod, '__unittest_skip_why__', ''))
                 self._addSkip(result, self, skip_why)
             finally:
                 result.stopTest(self)
             return
         expecting_failure_method = getattr(testMethod,
                                            "__unittest_expecting_failure__", False)
         expecting_failure_class = getattr(self,
                                           "__unittest_expecting_failure__", False)
         expecting_failure = expecting_failure_class or expecting_failure_method
         outcome = _Outcome(result)
         try:
             self._outcome = outcome
     
             with outcome.testPartExecutor(self):
                 self.setUp()
             if outcome.success:
                 outcome.expecting_failure = expecting_failure
                 with outcome.testPartExecutor(self, isTest=True):
 >                   testMethod()
 E                   TypeError: test_login_pwd_error() missing 2 required positional arguments: 'user_data' and 'init_app'
 
 C:\Program Files\Python37\lib\unittest\case.py:615: TypeError
F test_cases/test_login.py::TestLogin::test_login_success
 self = <unittest.case._Outcome object at 0x0000000004853630>
 test_case = <test_login.TestLogin testMethod=test_login_success>, isTest = True
 
     @contextlib.contextmanager
     def testPartExecutor(self, test_case, isTest=False):
         old_success = self.success
         self.success = True
         try:
 >           yield
 
 C:\Program Files\Python37\lib\unittest\case.py:59: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <test_login.TestLogin testMethod=test_login_success>
 result = <TestCaseFunction test_login_success>
 
     def run(self, result=None):
         orig_result = result
         if result is None:
             result = self.defaultTestResult()
             startTestRun = getattr(result, 'startTestRun', None)
             if startTestRun is not None:
                 startTestRun()
     
         result.startTest(self)
     
         testMethod = getattr(self, self._testMethodName)
         if (getattr(self.__class__, "__unittest_skip__", False) or
             getattr(testMethod, "__unittest_skip__", False)):
             # If the class or method was skipped.
             try:
                 skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')
                             or getattr(testMethod, '__unittest_skip_why__', ''))
                 self._addSkip(result, self, skip_why)
             finally:
                 result.stopTest(self)
             return
         expecting_failure_method = getattr(testMethod,
                                            "__unittest_expecting_failure__", False)
         expecting_failure_class = getattr(self,
                                           "__unittest_expecting_failure__", False)
         expecting_failure = expecting_failure_class or expecting_failure_method
         outcome = _Outcome(result)
         try:
             self._outcome = outcome
     
             with outcome.testPartExecutor(self):
                 self.setUp()
             if outcome.success:
                 outcome.expecting_failure = expecting_failure
                 with outcome.testPartExecutor(self, isTest=True):
 >                   testMethod()
 E                   TypeError: test_login_success() missing 2 required positional arguments: 'user_data' and 'init_app'
 
 C:\Program Files\Python37\lib\unittest\case.py:615: TypeError
